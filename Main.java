import java.util.ArrayList;
import java.util.Comparator;
import java.util.Scanner;

// Крестьянин, разбойник, снайпер, колдун, копейщик, арбалетчик, монах. Для каждого сформировать список свойств и возможных действий. 
// Напрнимер свойство скорость, действие нанести удар. Проанализировать получившиеся свойства и действия персонажей и создать Обобщённый класс 
// описывающий свойства и действия имеющиеся у всех персонажей. Создать этот класс. Создать классы для каждого типа персонажей наследующие и расширяющие
//  абстрактный(обобщённый) класс. В основной программе создать по одному экземпляру каждого типа персонажей. Семинар1 

// Доработать дерево классов так, чтобы экземпляры классов создавались конструктором с именем в параметре а остальные параметры инициализировали сами 
// в зависимости от персонажа. Добавить файл интерфейса в котором описать два метода, void step(); и String getInfo(); Добавить реализацию интерфейса 
// в ваш коренной абстрактный класс. Переопределить getInfo так, чтобы он возвращал строки:"Я крестьянин", "Я снайпер" и так далее в зависимости от 
// типа персонажа. В основном классе создать список и добавить в него 10 случаных персонажей. Пройти по списку и вывести строку возвращаемую getInfo.
// Семинар 2

// В материалы добавил xml с полями и параметрами по умолчанию. Убедиться что у вас все поля описанны. Создать в основной программе два списка. 
// Положить в них по 10 случайных персонажей. В первом только крестьянин, разбойник, снайпер или колдун. Во втором крестьянин, копейщик, арбалетчик,
//  монах. Вывести в консоль информацию обо всех персонажах не зависимо от списка, очередь должна определяться скоростью каждого персонажа.
// Семинар 3 

// Создать класс с описанием координат, x и y.
// Добавить в абстрактный класс порле с координатами и пробросить его инициализацию до конструкторов персонажей. Farmer farmer = new Farmer(getName(), x, y);
// Реализовать метод step() лучников. 
// 3.1 Если жизнь равна нулю или стрел нет, завершить оьработку.
// 3.2 Поиск среди противников наиболее приближённого. 
// 3.3 Нанести среднее повреждение найденному противнику. 
// 3.4 Найти среди своих крестьянина. 
// 3.5 Если найден завершить метод иначе уменьшить запас стрел на одну.
//Семинар4

// Пример реализации шага лучника в архиве. Доработать шаг лучника в своём проекте. Сделать степ крестьян - если не труп то state = "Stand"
// если не труп то найти среди своих персонажа с здоровьем меньше максимального и вылечить его!
//Семинар5
public class Main {
    public static void main(String[] args) {

        ArrayList<Characters> arrayList1 = new ArrayList<>();
        ArrayList<Characters>arrayOll = new ArrayList<>();

        System.out.println("Команда 1");
        Characters.createArrayList(arrayList1, 0, 1);

        for (int i = 0; i < arrayList1.size(); i++) {
            System.out.println( arrayList1.get(i).getinfo());
            arrayOll.add(arrayList1.get(i));
        }

        ArrayList<Characters> arrayList2 = new ArrayList<>();
        Characters.createArrayList(arrayList2, 3, 10);
        System.out.println("Команда 2");
        
        for (int i = 0; i < arrayList2.size(); i++) {
            System.out.println(arrayList2.get(i).getinfo());
            arrayOll.add(arrayList2.get(i));
        }

        System.out.println(arrayOll);
        arrayOll.sort(new Comparator<Characters>() {
            public int compare(Characters o1, Characters o2){
                return o2.getSpeed() - o1.getSpeed();
            }
        });

        Scanner user_input = new Scanner(System.in);
        while (true) {
            for (Characters human: arrayOll) {
                if(arrayList1.contains(human)){
                    human.step(arrayList1, arrayList2);
                }else{
                    human.step(arrayList2, arrayList1);
                }
            }
            user_input.nextLine();
            System.out.println(arrayOll);
        }
    }  
}    



